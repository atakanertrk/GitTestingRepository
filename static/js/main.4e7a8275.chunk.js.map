{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","SearchBox","searchChange","onChange","type","placeholder","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","error","isLoaded","items","fetch","then","response","json","users","filiteredRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAACC,GACb,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,WAC1D,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCSCC,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACA,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,CAAMR,GAAIK,EAAOG,GAAGR,GAAIE,KAAMG,EAAOG,GAAGN,KAAMC,MAAOE,EAAOG,GAAGL,aCK1DM,EAZG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKZ,UAAU,OACd,2BACAa,SAAUD,EACVZ,UAAU,mCACVc,KAAK,SACLC,YAAY,oBCCAC,G,MARA,SAACjB,GACf,OACC,yBAAKkB,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAmBC,OAAO,UAC9DrB,EAAMsB,YCsDKC,E,kDAnDd,WAAYvB,GAAQ,IAAD,8BAElB,cAAMA,IAWPwB,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAXxC,EAAKC,MAAQ,CACZtB,OAAO,GACPmB,YAAa,GACbI,MAAO,KACJC,UAAU,EACVC,MAAO,IATO,E,gEAkBC,IAAD,OAElBC,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACP,EAAKZ,SAAS,CAAClB,OAAO8B,S,+BAIf,IAAD,OAIDC,EAAkBC,KAAKV,MAAMtB,OAAOiC,QAAO,SAAAC,GAChD,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKd,MAAMH,YAAYgB,kBAEjE,OAA8B,IAA3BH,KAAKV,MAAMtB,OAAOqC,OACb,uCAIN,yBAAK5C,UAAU,MACd,4CACA,kBAAC,EAAD,CAAWY,aAAc2B,KAAKhB,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUhB,OAAQ+B,U,GA5CNO,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MADF,KAGAC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.4e7a8275.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\treturn(\r\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${props.id}?200x200`} alt='robots'/> \r\n\t\t\t<div> \r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t<div>\r\n\t{ \r\n\t\trobots.map((user,i)=>{ \r\n\t\t\treturn <Card id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t\t})\r\n\t}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tonChange={searchChange} \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"search robots\" \r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflow:'scroll',border:'5px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll; ","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\t//console.log(\"constructor\");\r\n\t\tsuper(props)\r\n\t\t//for searchbox\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield: '',\r\n\t\t\terror: null,\r\n\t\t    isLoaded: false,\r\n\t\t    items: []\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t//console.log(\"onsearchchange\");\r\n\t\tthis.setState({searchfield:event.target.value});\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\t//console.log(\"component did mount\");\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n\t\t\treturn response.json();\r\n\t\t}).then(users=>{\r\n\t\t\tthis.setState({robots:users});\r\n\t\t});\r\n\t}\r\n\r\n\trender(){\r\n\t\t//const{robots,searchfield} = this.state; with this way we dont have to write this.state all the time\r\n\t\t//console.log(\"render\");\r\n\t\t//filiter()  creates a new array with all the elements that pass the test implemented by the callback() function\r\n\t\tconst filiteredRobots = this.state.robots.filter(robot =>{\r\n\t\t return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\tif(this.state.robots.length===0){\r\n\t\t\treturn <h1>LOADING</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1>Robo Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filiteredRobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n  } \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t\t<App/>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}